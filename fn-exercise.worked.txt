     start:
	mov eax, 2
	mov ebx, 3
	mov ecx, 4	; just for kicks, so we can tell if it ends up with the same value
	mov edx, 5	; just for kicks, so we can tell if it ends up with the same value
	push eax
	push ebx
	call multiply	; function called, returns result in eax
	add esp, 8	; re-point the stack pointer back to where it was
	hlt

; write function multiply that takes two parameters from the stack, multiplies them, and returns
; the result in EAX. 
;
; Save and restore registers other than EAX that you use!
     multiply:
			; We need to jump over the return address which is now on the stack
	add esp, 4	; which is 4 bytes/32 bits long
	pop ebx		; restore ebx
	pop eax		; restore eax
	push edx	; stash edx prior to MUL which modifies edx
	mul ebx		; eax now contains value of eax.original by ebx.original (the original requirement)
	pop edx		; unstash edx
	sub esp, 12	; re-point the stack pointer to the return address
	ret		; return back to the return address